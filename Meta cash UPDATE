
import os

def alterar_dados_cadastro(usuario):
    try:
        with open ("Cadastros.txt", "r", encoding = 'cp1252' ) as f:
            linhas = f.readlines()
        alterado = False
        for i in range(0, len(linhas), 4):
            if linhas[i].strip() == usuario:
                print("============================================")
                print("qual informa√ß√£o voc√™ deseja alterar?")
                print("1 - nome de usu√°rio")
                print("2 - senha")
                print("3 - email", "\n")
                resposta = input("Digite o n√∫mero correspondente: ")
                if resposta == "1":
                    while True:
                        novo_usuario = input("Digite seu novo nome de usu√°rio: ")
                        if ja_cadastrado_usuario(novo_usuario):
                            print("‚ùå Nome de usu√°rio ja existe")
                        else:
                            linhas[i] = novo_usuario + "\n"
                            usuario = novo_usuario
                            break
                elif resposta =="2":
                    nova_senha = input("Digite a sua nova senha ela precisa ter letras e n√∫meros e no m√≠nimo 8 caracters: ")
                    if len(nova_senha) < 8:
                        print ("‚ùå A senha precisa ter no m√≠nimo 8 caracteres", "\n")
                        return usuario
                    elif not any(char.isalpha() for char in nova_senha):
                        print ("‚ùå A senha deve ter no m√≠nimo uma letra", "\n")
                        return usuario
                    elif not any(char.isdigit() for char in nova_senha):
                        print ("‚ùå A senha precisa ter pelo menos um n√∫mero", "\n")
                        return usuario
                    else:
                        print("‚úÖ Senha v√°lida", "\n")
                        linhas [i + 1] = nova_senha + "\n"
                elif resposta == "3":
                    novo_email = input("Digite o seu novo email: ")
                    if not novo_email.endswith(("@gmail.com", "@hotmail.com", "yahoo.com.br", "outlook.com")):
                        print("‚ùå Dom√≠nio inv√°lido.")
                        return usuario
                    if ja_cadastrado_email(novo_email):
                        print("‚ùå Email j√° est√° sendo usado")
                        return usuario
                    linhas[i + 2] = novo_email + "\n"
                else:
                    print("‚ùå resposta inv√°lida")
                alterado = True
                break
        if alterado:
            with open ("Cadastros.txt", "w", encoding = 'cp1252') as f:
                f.writelines(linhas)
                print("‚úÖ Dados alterados com sucesso")
        else:
            print("‚ùå Usu√°rio n√£o encontrado")
        return usuario
    except FileNotFoundError:
        print("‚ùå Arquivo n√£o encontrado.")
        return usuario


def deletar_conta(usuario):
    resposta = input("Voc√™ realmente deseja deletar a sua conta? (S/N) ")
    if resposta.upper() == "S":
        try:
            with open("Cadastros.txt", "r", encoding='cp1252') as f:
                linhas = f.readlines()

            nova_lista = []
            deletado = False
            for i in range(0, len(linhas), 4):
                if linhas[i].strip() == usuario:
                    deletado = True
                    continue  
                nova_lista.extend(linhas[i:i + 4])  
            if deletado:
                with open("Cadastros.txt", "w", encoding='cp1252') as f:
                    f.writelines(nova_lista)
                print("‚úÖ Sua conta foi deletada com sucesso")
                central_do_site()
            else:
                print("‚ùå Usu√°rio n√£o encontrado")
        except FileNotFoundError:
            print("‚ùå Arquivo de cadastro n√£o encontrado.")
    else:
        print("‚ùå Opera√ß√£o cancelada.")


def ver_perfil_usuario(usuario):
    try:
        with open ("Cadastros.txt", "r", encoding = 'cp1252') as f:
            linhas = f.readlines()
            for i in range(0, len(linhas), 4):
                try:
                    usuario_cadastrado = linhas[i].strip()
                    if usuario_cadastrado == usuario:
                        senha = linhas[i + 1].strip()
                        email = linhas[i + 2].strip()
                        print("======== üë§ Perfil de usu√°rio üë§ ========", "\n")
                        print(f"Usu√°rio: {usuario_cadastrado}")
                        print(f"Senha: {senha}")
                        print(f"Email: {email}", "\n")
                        print("1 - Alterar informa√ß√µes")
                        print("2 - Deletar conta")
                        print("3 - Sair do menu de perfil", "\n")
                        opcao = input("Digite o n√∫mero correspondente para prosseguir: ")
                        if opcao == "1":
                            usuario = alterar_dados_cadastro(usuario)
                        elif opcao == "2":
                            deletar_conta(usuario)
                        elif opcao == "3":
                            return usuario
                except IndexError:
                    continue
            return usuario
    except FileNotFoundError:
        print("‚ùå Arquivo de cadastro n√£o encontrado")
        return usuario


def ja_cadastrado_email(email):
    try:
        with open("Cadastros.txt", "r", encoding = 'cp1252') as f:
            linhas = f.readlines()
            for i in range(0, len(linhas), 4):
                try:
                    email_cadastrado = linhas[i + 2].strip()
                    if email == email_cadastrado:
                        return True
                except IndexError:
                    continue
    except FileNotFoundError:
        return False


def ja_cadastrado_usuario(usuario):
    try:
        with open("Cadastros.txt", "r", encoding = 'cp1252') as f:
            linhas = f.readlines()
            for i in range(0, len(linhas), 4):
                try:
                    usuario_cadastrado = linhas[i].strip()
                    if usuario == usuario_cadastrado:
                        return True
                except IndexError:
                    continue
    except FileNotFoundError:
        return False


def login():
    while True:
        global login_usuario
        login_usuario = input("Digite o seu nome de usu√°rio: ")
        login_senha = input("Digite sua senha: ")
        try:
            with open("Cadastros.txt", "r", encoding = 'cp1252') as f:
                linhas = f.readlines()
                for i in range(0, len(linhas), 4):
                    try:
                        usuario_cadastrado = linhas[i].strip()
                        senha_cadastrada = linhas[i + 1].strip()
                        if usuario_cadastrado == login_usuario and senha_cadastrada == login_senha:
                            print("‚úÖ Seu login foi realizado com sucesso!", "\n")
                            return usuario_cadastrado
                    except IndexError:
                        continue
            print("‚ùå Usu√°rio ou senha incorretos")
        except FileNotFoundError:
            print("‚ùå Cadastro n√£o existe")


def cadastro():
    while True:
        usuario = input("Digite um nome de usu√°rio: ")
        if ja_cadastrado_usuario(usuario):
            print("‚ùå Usu√°rio j√° cadastrado tente outro", "\n")
        else:
            print("‚úÖ Usu√°rio v√°lido", "\n")
            break
    while True:
        senha = input("Digite uma senha que contenha no m√≠nimo 8 caracteres, e tenha letras e n√∫meros: ")
        if len(senha) < 8:
            print ("‚ùå A senha precisa ter no m√≠nimo 8 caracteres", "\n")
            continue
        elif not any(char.isalpha() for char in senha):
            print ("‚ùå A senha deve ter no m√≠nimo uma letra", "\n")
            continue
        elif not any(char.isdigit() for char in senha):
            print ("‚ùå A senha precisa ter pelo menos um n√∫mero", "\n")
            continue
        else:
            print("‚úÖ Senha v√°lida", "\n")
            break
    while True:
        validar_senha = input(" Digite sua senha novamente: ")
        if validar_senha == senha:
            print("‚úÖ Senha correspondennte", "\n")
            break
        else:
            print("‚ùå Senha n√£o correspondente", "\n")
            continue
    while True:
        email = input("Digite seu email, (dom√≠nios aceitos: @gmail.com, @hotmail.com, @yahoo.com.br, @outlook.com): ")
        if not email.endswith(("@gmail.com", "@hotmail.com", "@yahoo.com.br", "@outlook.com")):
            print("‚ùå O email n√£o possui um dos dom√≠nios especificados", "\n")
            continue
        if ja_cadastrado_email(email):
            print("‚ùå J√° existe uma conta com esse email", "\n")
        else:
            print("‚úÖ Email v√°lido","\n")
            print("Redirecionando para o menu do site")
            break
    with open("Cadastros.txt", "a", encoding = 'cp1252') as f:
        f.write(usuario + "\n")
        f.write(senha + "\n")
        f.write(email + "\n")
        f.write("----------\n")
    print("‚úÖ Cadastro conclu√≠do. Voltando para o menu inicial")
    return


def menu_metacash(usuario):
    while True:
        print("========== Metacash ==========", "\n")
        print("1 - Coleta de dados ")
        print("2 - Metas ")
        print("3 - Ver perfil de usu√°rio")
        print("4 - Sair do Metacash", "\n")
        resposta_menu = input("Digite o n√∫mero correspondente ao que voc√™ deseja: ")
        if resposta_menu == "1":
            coleta_de_dados()
            continue
        elif resposta_menu == "2":
            menu_metas()
            continue

        elif resposta_menu == "3":
            usuario = ver_perfil_usuario(usuario)
        elif resposta_menu == "4":
            print("\n======================================")
            print("Obrigado por usar o Metacash at√© logo!üëã")
            print("\n======================================")
            break

        
def central_do_site():
    while True:
        print("======= Bem vindo ao Metacash =======", "\n")
        print("O que voc√™ deseja?")
        print("1 - Login")
        print("2 - Cadastro")
        print("3 - Sair", "\n")
        resposta = input("Digite o n√∫mero correspondente ao que voc√™ deseja: ")
        if resposta == "1":
            usuario_logado = login()
            if usuario_logado:
                menu_metacash(usuario_logado)
        elif resposta == "2":
            cadastro()
        elif resposta == "3":
            print("At√© a proxima")
            break
        else:
            print("‚ùå Resposta inv√°lida", "\n")
            continue


def carregar_usuarios(arquivo):
    usuarios = []
    try:
        with open(arquivo, 'r', encoding='utf-8') as f:
            linhas = f.readlines()
            for linha in linhas:
                partes = linha.strip().split('|')
                if len(partes) < 4:
                    partes += [''] * (4 - len(partes))  # Garante que tenha sempre 4 campos
                usuarios.append({
                    'nome': partes[0],
                    'salario': float(partes[1]),
                    'meta': partes[2],
                    'prazo': partes[3]
                })
    except FileNotFoundError:
        print(f"O arquivo {arquivo} n√£o foi encontrado.")
    return usuarios


# Fun√ß√£o para salvar os dados no arquivo
def salvar_usuarios(arquivo, usuarios):
    with open(arquivo, 'w', encoding='utf-8') as f:
        for u in usuarios:
            linha = f"{u['nome']}|{u['salario']}|{u['meta']}|{u['prazo']}\n"
            f.write(linha)


# Fun√ß√£o para criar ou atualizar a meta e o prazo
def criar_ou_atualizar_meta(arquivo, nome_usuario):
    usuarios = carregar_usuarios(arquivo)
    usuario_encontrado = None

    for usuario in usuarios:
        if usuario['nome'].lower() == nome_usuario.lower():
            usuario_encontrado = usuario
            break

    if not usuario_encontrado:
        print("\n===========================")
        print("‚ùå-Usu√°rio n√£o encontrado!")
        print("\n===========================")
        return

    # Converter sal√°rio para float para garantir c√°lculos corretos
    salario = float(usuario_encontrado['salario'])

    # ====== INPUT DO VALOR DA META ======
    while True:
        try:
            valor_meta = float(input("\nüíµ-Qual √© o valor total da sua meta? R$"))
            if valor_meta > salario:
                print("\n=========================================================================")
                print("‚ùå-O valor da meta n√£o pode ser maior que o seu sal√°rio! Tente novamente.")
                print("\n=========================================================================")
                continue
            elif valor_meta <= 0:
                print("\n===============================================================================")
                print("‚ùå-Meta inv√°lida, sua meta n√£o pode ser negativa ou igual a 0. Tente novamente.")
                print("\n===============================================================================")
                continue
        except ValueError:
            print("\n==================================")
            print("‚ùå-Digite um valor num√©rico v√°lido.")
            print("\n==================================")
            continue
        break

    # ====== INPUT DO PRAZO DA META ======
    while True:
        try:
            dias = int(input("\n‚è∞-Em quantos dias voc√™ deseja alcan√ßar essa meta? "))
            if dias <= 0:
                print("‚ùå-O n√∫mero de dias deve ser maior que 0. Tente novamente.")
                continue
        except ValueError:
            print("‚ùå-Digite um n√∫mero inteiro v√°lido.")
            continue
        break

    # ====== VALIDA√á√ÉO SE A META √â REALISTA ======
    meta_diaria = valor_meta / dias
    if meta_diaria > salario * 0.35:
        print("================================================================================================")
        print("‚ö†Ô∏èCUIDADO: Sua meta di√°ria √© maior que 35% do seu sal√°rio. Isso pode ser arriscado.‚ö†Ô∏è")
        print("================================================================================================")
    else:
        print("===============================================")
        print("‚úÖ-Sua meta parece realista, continue assim!üëè")
        print("===============================================")

    # ====== EXIBINDO OS C√ÅLCULOS ======
    print("\n=======================(META DEFINIDA)=======================\n")

    if dias < 7:
        print("Voc√™ tem uma meta di√°ria!üìÑ")
        print(f"Meta Di√°ria: R$ {meta_diaria:.2f} por dia")

    elif dias < 30:
        semanas = max(1, dias // 7)
        meta_semanal = valor_meta / semanas
        print("Voc√™ tem uma meta di√°ria e semanal!üìã")
        print(f"Meta Di√°ria: R$ {meta_diaria:.2f} por dia")
        print(f"Meta Semanal: R$ {meta_semanal:.2f} por semana")

    else:
        meta_semanal = meta_diaria * 7
        meta_mensal = meta_diaria * 30
        print("Voc√™ tem uma meta di√°ria, semanal e mensal!üìë")
        print(f"Meta Di√°ria: R$ {meta_diaria:.2f} por dia")
        print(f"Meta Semanal: R$ {meta_semanal:.2f} por semana")
        print(f"Meta Mensal: R$ {meta_mensal:.2f} por m√™s")

    print(f"\nMeta total: R$ {valor_meta:.2f}")
    print(f"Prazo: {dias} dias")
    print("\n====================================================")

    # ====== ATUALIZA NO BLOCO DE NOTAS ======
    usuario_encontrado['meta'] = str(valor_meta)
    usuario_encontrado['prazo'] = str(dias)

    salvar_usuarios(arquivo, usuarios)

    print("‚úÖ-Meta e prazo salvos com sucesso!\n")


# Fun√ß√£o para consultar metas
def consultar_metas(arquivo):
    usuarios = carregar_usuarios(arquivo)
    print("\n=======================(METAS ATUAIS)=======================\n")
    encontrou = False
    for u in usuarios:
        if u['meta'] and u['prazo']:
            print(f"Nome: {u['nome']} | Meta: R$ {u['meta']} | Prazo: {u['prazo']} dias")
            encontrou = True
    if not encontrou:
        print("‚ùåNenhuma meta cadastrada at√© o momento.‚ùå")
    print("\n=============================================================\n")


#  Fun√ß√£o para cadastrar novo usu√°rio
def cadastrar_usuario(arquivo):
    usuarios = carregar_usuarios(arquivo)
    nome = input("Digite o nome do novo usu√°rio: ").strip()

    # Verifica se o usu√°rio j√° existe
    for u in usuarios:
        if u['nome'].lower() == nome.lower():
            print("\n========================")
            print("‚ùå-Usu√°rio j√° cadastrado.")
            print("\n========================")
            return

    while True:
        try:
            salario = float(input("Digite o sal√°rio do usu√°rio: R$"))
            if salario <= 0:
                print("\n=======================================")
                print("‚ùå-Sal√°rio inv√°lido, tente novamente.")
                print("\n=======================================")
                continue
            break
        except ValueError:
            print("\n==================================")
            print("‚ùå-Digite um valor num√©rico v√°lido.")
            print("\n==================================")

    usuarios.append({
        'nome': nome,
        'salario': salario,
        'meta': '',
        'prazo': ''
    })

    salvar_usuarios(arquivo, usuarios)
    print("\n=========================================")
    print(f"‚úÖ-Usu√°rio {nome} cadastrado com sucesso!")
    print("\n=========================================")

#Registro de Gasto#
def validar_registro_gasto(mensagem):
    while True:
        try:
            valor = float(input(mensagem).replace(",", "."))
            if valor < 0:
                print("‚ö†Ô∏è Digite um valor positivo.")
                continue
            return valor
        except ValueError:
            print("‚ö†Ô∏è Digite um n√∫mero v√°lido.")


def validar_preferencia(categoria):
    while True:
        try:
            peso = int(input(f"Peso de prioridade para {categoria} (1 a 5): "))
            if peso < 1 or peso > 5:
                print("‚ö†Ô∏è O peso deve ser entre 1 e 5.")
                continue
            return peso
        except ValueError:
            print("‚ö†Ô∏è Digite um n√∫mero inteiro v√°lido.")


# Fun√ß√£o para salvar ou substituir usu√°rio no arquivo usuarios.txt
def salvar_ou_substituir_usuario(usuario, senha, email, salario, valor_meta, progresso,
                                alimentacao, lazer, transporte, fixos, preferencias, prazo):
    nova_linha = (f"{usuario}:{senha}:{email}:{salario}:{valor_meta}:{progresso}:{prazo}:"
                f"{alimentacao}:{lazer}:{transporte}:{fixos}:"
                f"{preferencias['Alimenta√ß√£o']}:{preferencias['Lazer']}:"
                f"{preferencias['Transporte']}\n")

    try:
        with open("usuarios.txt", "r") as f:
            linhas = f.readlines()
    except FileNotFoundError:
        linhas = []

    usuario_encontrado = False
    novas_linhas = []

    for linha in linhas:
        if linha.startswith(f"{usuario}:"):
            novas_linhas.append(nova_linha)
            usuario_encontrado = True
        else:
            novas_linhas.append(linha)

    if not usuario_encontrado:
        novas_linhas.append(nova_linha)

    with open("usuarios.txt", "w") as f:
        f.writelines(novas_linhas)


def coleta_de_dados():
    print("================================")
    print("Informe seus dados financeiros")
    print("================================")
    global login_usuario
    nome_usuario = login_usuario

    usuario = None
    senha = None
    email = None

    try:
        with open("Cadastros.txt", "r", encoding='cp1252') as arquivo:
            linhas = arquivo.readlines()
            for i in range(0, len(linhas), 4):
                u = linhas[i].strip()
                s = linhas[i+1].strip()
                e = linhas[i+2].strip()
                if u == nome_usuario:
                    usuario = u
                    senha = s
                    email = e
                    break
    except FileNotFoundError:
        print("\n=========================================")
        print("‚ö†Ô∏è Arquivo Cadastros.txt n√£o encontrado.")
        print("\n=========================================")
        return

    if usuario is None:
        print("\n========================================================")
        print(f"‚ö†Ô∏è Usu√°rio '{nome_usuario}' n√£o encontrado no cadastro.")
        print("\n========================================================")
        return

    salario = validar_registro_gasto("Sal√°rio mensal: R$ ")
    fixos = validar_registro_gasto("Gastos com Custos Fixos: R$ ")
    alimentacao = validar_registro_gasto("Gastos com Alimenta√ß√£o: R$ ")
    lazer = validar_registro_gasto("Gastos com Lazer: R$ ")
    transporte = validar_registro_gasto("Gastos com Transporte: R$ ")

    preferencias = {}
    preferencias['Alimenta√ß√£o'] = validar_preferencia("Alimenta√ß√£o")
    preferencias['Lazer'] = validar_preferencia("Lazer")
    preferencias['Transporte'] = validar_preferencia("Transporte")

    valor_meta = 0
    progresso = 0
    prazo = 0

    salvar_ou_substituir_usuario(usuario, senha, email, salario, valor_meta, progresso,
                                alimentacao, lazer, transporte, fixos, preferencias, prazo)
    print("\n================================================")
    print("\n‚úÖ Dados financeiros registrados com sucesso!")
    print("\n================================================")

# Fun√ß√£o para carregar usu√°rios do arquivo (necess√°ria para algumas fun√ß√µes acima)
def carregar_usuarios(arquivo):
    usuarios = []
    try:
        with open(arquivo, 'r', encoding='utf-8') as f:
            for linha in f:
                partes = linha.strip().split('|')
                if len(partes) >= 4:
                    usuarios.append({
                        'nome': partes[0],
                        'salario': partes[1],
                        'meta': partes[2],
                        'prazo': partes[3]
                    })
    except FileNotFoundError:
        pass
    return usuarios
def carregar_usuarios_arquivo(arquivo):
    usuarios = []
    try:
        with open(arquivo, 'r', encoding='utf-8') as f:
            for linha in f:
                partes = linha.strip().split(':')
                if len(partes) >= 13:
                    usuarios.append({
                        'usuario': partes[0],
                        'senha': partes[1],
                        'email': partes[2],
                        'salario': float(partes[3]),
                        'valor_meta': float(partes[4]),
                        'progresso': float(partes[5]),
                        'prazo': int(partes[6]),
                        'alimentacao': float(partes[7]),
                        'lazer': float(partes[8]),
                        'transporte': float(partes[9]),
                        'fixos': float(partes[10]),
                        'pref_alimentacao': int(partes[11]),
                        'pref_lazer': int(partes[12]),
                        'pref_transporte': int(partes[13]) if len(partes) > 13 else 0
                    })
    except FileNotFoundError:
        pass
    return usuarios


def salvar_usuarios_arquivo(arquivo, usuarios):
    with open(arquivo, 'w', encoding='utf-8') as f:
        for u in usuarios:
            linha = (f"{u['usuario']}:{u['senha']}:{u['email']}:{u['salario']}:{u['valor_meta']}:"
                     f"{u['progresso']}:{u['prazo']}:{u['alimentacao']}:{u['lazer']}:"
                     f"{u['transporte']}:{u['fixos']}:{u['pref_alimentacao']}:{u['pref_lazer']}:"
                     f"{u['pref_transporte']}\n")
            f.write(linha)


def encontrar_usuario(usuarios, nome):
    for u in usuarios:
        if u['usuario'].lower() == nome.lower():
            return u
    return None


def criar_ou_atualizar_meta(arquivo, nome_usuario):
    usuarios = carregar_usuarios_arquivo(arquivo)
    usuario = encontrar_usuario(usuarios, nome_usuario)
    if not usuario:
       print("\n==========================")
       print("‚ùå Usu√°rio n√£o encontrado.")
       print("\n==========================")
       return

    salario = usuario['salario']

    while True:
        try:
            valor_meta = float(input("\n üíµ- Digite o valor total da meta: R$ "))
            if valor_meta <= 0 or valor_meta > salario * 10:  # limite arbitr√°rio para evitar erro
                print("\n======================================")
                print(" ‚ùå Valor da meta irrealita, tente novamente.")
                print("\n======================================")
                continue
            break
        except ValueError:
            print("\n====================================")
            print("\n ‚ùåDigite um valor num√©rico v√°lido.")
            print("\n====================================")


    while True:
        try:
            prazo = int(input("\n üï∞Ô∏è- Em quantos dias deseja alcan√ßar a meta? "))
            if prazo <= 0:
                print("\n===============================")
                print(" ‚ùå Prazo deve ser maior que zero.")
                print("\n===============================")
                continue
            break
        except ValueError:
            print("\n===============================")
            print("‚ùå Digite um n√∫mero inteiro v√°lido.")
            print("\n===============================")
    usuario['valor_meta'] = valor_meta
    usuario['prazo'] = prazo
    usuario['progresso'] = 0  # reseta progresso ao criar/atualizar meta

    salvar_usuarios_arquivo(arquivo, usuarios)
    print("\n=========================================")
    print("‚úÖ Meta e prazo atualizados com sucesso.")
    print("\n=========================================")


def registrar_progresso(arquivo, nome_usuario):
    usuarios = carregar_usuarios_arquivo(arquivo)
    usuario = encontrar_usuario(usuarios, nome_usuario)
    if not usuario:
        print("\n===============================")
        print("‚ùå Usu√°rio n√£o encontrado. ‚ùå")
        print("\n===============================")
        return

    if usuario['valor_meta'] == 0 or usuario['prazo'] == 0:
        print("\n===============================================================")
        print("‚ùå Voc√™ precisa criar uma meta antes de registrar progresso. ‚ùå")
        print("\n===============================================================")
        return

    while True:
        try:
            valor = float(input("Quanto voc√™ economizou hoje? R$ "))
            if valor < 0:
                print("Valor inv√°lido. N√£o pode ser negativo.")
                continue
            break
        except ValueError:
            print("\n==================================")
            print(" ‚ùå Digite um n√∫mero v√°lido. ‚ùå ")
            print("\n==================================")

    usuario['progresso'] += valor
    # Reduz o prazo em 1, mas garantindo que n√£o fique negativo
    if usuario['prazo'] > 0:
        usuario['prazo'] -= 1

    salvar_usuarios_arquivo(arquivo, usuarios)
    print("\n==============================================================")
    print(f"‚úÖ Progresso atualizado! Total economizado: R$ {usuario['progresso']:.2f}")
    print(f"‚è≥ Prazo restante: {usuario['prazo']} dias")
    print("\n==============================================================")

def ver_progresso(arquivo, nome_usuario):
    usuarios = carregar_usuarios_arquivo(arquivo)
    usuario = encontrar_usuario(usuarios, nome_usuario)
    if not usuario:
        print("\n=========================================")
        print("‚ùå Usu√°rio n√£o encontrado. Tente novamente")
        print("=========================================")
        return

    valor_meta = usuario['valor_meta']
    progresso = usuario['progresso']
    prazo = usuario['prazo']

    if valor_meta == 0 or prazo == 0:
        print("\n================================")
        print("‚ùå Voc√™ ainda n√£o definiu uma meta.")
        print("================================")
        return

    faltando = max(0, valor_meta - progresso)
    porcentagem = (progresso / valor_meta) * 100 if valor_meta > 0 else 0
    porcentagem = min(porcentagem, 100)  # Limita no m√°ximo 100%

    dias_restantes = prazo

    # Metas auxiliares
    meta_diaria = valor_meta / (prazo if prazo != 0 else 1)
    meta_semanal = meta_diaria * 7
    meta_mensal = meta_diaria * 30

    # Barra de progresso
    total_blocos = 10  # N√∫mero de blocos visuais
    blocos_preenchidos = int((porcentagem / 100) * total_blocos)
    blocos_vazios = total_blocos - blocos_preenchidos

    barra = '‚óè‚óè' * blocos_preenchidos + '‚óã‚óã' * blocos_vazios

    print("\n================(PROGRESSO DA META)==================")
    print(f"üéØ Meta Total:           R$ {valor_meta:.2f}")
    print(f"üí∞ Progresso Atual:      R$ {progresso:.2f}")
    print(f"üìâ Faltando:             R$ {faltando:.2f}")
    print(f"üìÖ Dias Restantes:       {dias_restantes} dia(s)")

    print(f"\nüóìÔ∏è  Meta Di√°ria:         R$ {meta_diaria:.2f}")
    print(f"üìÜ Meta Semanal:         R$ {meta_semanal:.2f}")
    print(f"üóìÔ∏è  Meta Mensal:         R$ {meta_mensal:.2f}")

    print("\n==========", f"({porcentagem:.0f}%)".center(10), "==========")
    print(f" {barra}")
    print("\n===============================================")

    # Feedback ao usu√°rio
    if progresso >= valor_meta:
        print("\nüéâ Parab√©ns! Voc√™ j√° atingiu sua meta! ü•≥")
    elif dias_restantes <= 0 and progresso < valor_meta:
        print("\n‚ö†Ô∏è Prazo encerrado e a meta n√£o foi alcan√ßada.")
    elif progresso >= (valor_meta - (meta_diaria * dias_restantes)):
        print("\n‚úÖ Voc√™ est√° no ritmo certo! Continue assim!")
    else:
        print("\n‚ö†Ô∏è Aten√ß√£o! Voc√™ est√° um pouco atrasado com a meta.")


def menu_metas():
    global login_usuario
    arquivo = "usuarios.txt"
    print("======== MENU DE METAS ========")
    nome_usuario = login_usuario

    while True:
        print("\nEscolha uma op√ß√£o:")
        print("1 - Criar/Atualizar Meta")
        print("2 - Registrar Progresso")
        print("3 - Ver Progresso")
        print("4 - Sair")
        print("\n===========================")
        opcao = input("\nOp√ß√£o: ").strip()

        if opcao == '1':
            criar_ou_atualizar_meta(arquivo, nome_usuario)
        elif opcao == '2':
            registrar_progresso(arquivo, nome_usuario)
        elif opcao == '3':
            ver_progresso(arquivo, nome_usuario)
        elif opcao == '4':
            print("Saindo...")
            break
        else:
            print("\n=====================================")
            print("‚ùå Op√ß√£o inv√°lida. Tente novamente. ‚ùå")
            print("\n=====================================")

        if __name__ == "__main__":
            menu_metas()

central_do_site()
